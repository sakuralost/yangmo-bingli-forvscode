{"ast":null,"code":"import axios from 'axios';\n// 定义API基础URL\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// 定义错误响应的接口\n\n// 错误处理函数\nconst handleError = error => {\n  if (error.response) {\n    const errorData = error.response.data;\n    throw new Error(errorData.error || '请求失败');\n  } else if (error.request) {\n    throw new Error('无法连接到服务器');\n  } else {\n    throw new Error('请求配置错误');\n  }\n};\n\n// 获取所有记录\nexport const fetchRecords = async () => {\n  try {\n    const response = await api.get('/records');\n    return response.data;\n  } catch (error) {\n    handleError(error);\n    return [];\n  }\n};\n\n// 获取单个记录\nexport const fetchRecordById = async id => {\n  try {\n    const response = await api.get(`/records/${id}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};\n\n// 创建新记录\nexport const createRecord = async record => {\n  try {\n    const response = await api.post('/records', record);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};\n\n// 更新记录\nexport const updateRecord = async (id, record) => {\n  try {\n    const response = await api.put(`/records/${id}`, record);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};\n\n// 上传图片\nexport const uploadImages = async files => {\n  try {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('images', file);\n    });\n    const response = await api.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.urls;\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};\n\n// 创建带有诊断记录的新病例\nexport const createRecordWithDiagnosis = async (record, files) => {\n  try {\n    let imageUrls = [];\n    if (files && files.length > 0) {\n      imageUrls = await uploadImages(files);\n    }\n    const recordWithImages = {\n      ...record,\n      diagnosisRecords: record.diagnosisRecords.map((diagnosis, index) => ({\n        ...diagnosis,\n        images: diagnosis.images || [],\n        ...(index === record.diagnosisRecords.length - 1 ? {\n          images: imageUrls\n        } : {})\n      }))\n    };\n    return await createRecord(recordWithImages);\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};\n\n// 添加诊断记录\nexport const addDiagnosisToRecord = async (recordId, diagnosisContent, files) => {\n  try {\n    const record = await fetchRecordById(recordId);\n    let imageUrls = [];\n    if (files && files.length > 0) {\n      imageUrls = await uploadImages(files);\n    }\n    const updatedRecord = {\n      ...record,\n      diagnosisRecords: [...record.diagnosisRecords, {\n        content: diagnosisContent,\n        diagnosisTime: new Date().toISOString(),\n        images: imageUrls\n      }]\n    };\n    return await updateRecord(recordId, updatedRecord);\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","handleError","error","response","errorData","data","Error","request","fetchRecords","get","fetchRecordById","id","createRecord","record","post","updateRecord","put","uploadImages","files","formData","FormData","forEach","file","append","headers","urls","createRecordWithDiagnosis","imageUrls","length","recordWithImages","diagnosisRecords","map","diagnosis","index","images","addDiagnosisToRecord","recordId","diagnosisContent","updatedRecord","content","diagnosisTime","Date","toISOString"],"sources":["F:/Users/迷失小爷/文档/Aicoder/vscode/bingli/medical-record-assistant/src/services/api.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\nimport { Record } from '../types';\n\n// 定义API基础URL\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// 创建axios实例\nconst api = axios.create({\n    baseURL: API_BASE_URL\n});\n\n// 定义错误响应的接口\ninterface ErrorResponse {\n    error: string;\n}\n\n// 错误处理函数\nconst handleError = (error: AxiosError) => {\n    if (error.response) {\n        const errorData = error.response.data as ErrorResponse;\n        throw new Error(errorData.error || '请求失败');\n    } else if (error.request) {\n        throw new Error('无法连接到服务器');\n    } else {\n        throw new Error('请求配置错误');\n    }\n};\n\n// 获取所有记录\nexport const fetchRecords = async (): Promise<Record[]> => {\n    try {\n        const response = await api.get('/records');\n        return response.data;\n    } catch (error) {\n        handleError(error as AxiosError);\n        return [];\n    }\n};\n\n// 获取单个记录\nexport const fetchRecordById = async (id: string): Promise<Record> => {\n    try {\n        const response = await api.get(`/records/${id}`);\n        return response.data;\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};\n\n// 创建新记录\nexport const createRecord = async (record: Omit<Record, 'id' | 'createTime' | 'lastDiagnosisTime'>): Promise<Record> => {\n    try {\n        const response = await api.post('/records', record);\n        return response.data;\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};\n\n// 更新记录\nexport const updateRecord = async (id: string, record: Partial<Record>): Promise<Record> => {\n    try {\n        const response = await api.put(`/records/${id}`, record);\n        return response.data;\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};\n\n// 上传图片\nexport const uploadImages = async (files: File[]): Promise<string[]> => {\n    try {\n        const formData = new FormData();\n        files.forEach(file => {\n            formData.append('images', file);\n        });\n\n        const response = await api.post('/upload', formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        });\n\n        return response.data.urls;\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};\n\n// 创建带有诊断记录的新病例\nexport const createRecordWithDiagnosis = async (\n    record: Omit<Record, 'id' | 'createTime' | 'lastDiagnosisTime'>,\n    files?: File[]\n): Promise<Record> => {\n    try {\n        let imageUrls: string[] = [];\n        if (files && files.length > 0) {\n            imageUrls = await uploadImages(files);\n        }\n\n        const recordWithImages = {\n            ...record,\n            diagnosisRecords: record.diagnosisRecords.map((diagnosis, index) => ({\n                ...diagnosis,\n                images: diagnosis.images || [],\n                ...(index === record.diagnosisRecords.length - 1 ? { images: imageUrls } : {})\n            }))\n        };\n\n        return await createRecord(recordWithImages);\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};\n\n// 添加诊断记录\nexport const addDiagnosisToRecord = async (\n    recordId: string,\n    diagnosisContent: string,\n    files?: File[]\n): Promise<Record> => {\n    try {\n        const record = await fetchRecordById(recordId);\n        let imageUrls: string[] = [];\n        \n        if (files && files.length > 0) {\n            imageUrls = await uploadImages(files);\n        }\n\n        const updatedRecord = {\n            ...record,\n            diagnosisRecords: [\n                ...record.diagnosisRecords,\n                {\n                    content: diagnosisContent,\n                    diagnosisTime: new Date().toISOString(),\n                    images: imageUrls\n                }\n            ]\n        };\n\n        return await updateRecord(recordId, updatedRecord);\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}