{"ast":null,"code":"import axios from 'axios';\n// 定义API基础URL\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  // 10秒超时\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 添加请求重试拦截器\napi.interceptors.response.use(undefined, async error => {\n  const config = error.config;\n  if (!config || !config.retry) {\n    return Promise.reject(error);\n  }\n  config.retryCount = config.retryCount || 0;\n  if (config.retryCount >= 3) {\n    return Promise.reject(error);\n  }\n  config.retryCount += 1;\n  const backoff = new Promise(resolve => {\n    setTimeout(() => resolve(null), 1000 * Math.pow(2, config.retryCount - 1));\n  });\n  await backoff;\n  return api(config);\n});\n\n// 定义错误响应的接口\n\n// 错误处理函数\nconst handleError = error => {\n  if (error.response) {\n    const errorData = error.response.data;\n    throw new Error(errorData.error || '请求失败');\n  } else if (error.request) {\n    throw new Error('无法连接到服务器');\n  } else {\n    throw new Error('请求配置错误');\n  }\n};\n\n// 获取所有记录\nexport const fetchRecords = async () => {\n  try {\n    const response = await api.get('/records');\n    return response.data;\n  } catch (error) {\n    handleError(error);\n    return [];\n  }\n};\n\n// 获取单个记录\nexport const fetchRecordById = async id => {\n  try {\n    const response = await api.get(`/records/${id}`);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};\n\n// 创建新记录\nexport const createRecord = async record => {\n  try {\n    const response = await api.post('/records', record);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};\n\n// 更新记录\nexport const updateRecord = async (id, record) => {\n  try {\n    const response = await api.put(`/records/${id}`, record);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};\n\n// 上传图片\nexport const uploadImages = async files => {\n  try {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('images', file);\n    });\n    const response = await api.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.urls;\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};\n\n// 创建带有诊断记录的新病例\nexport const createRecordWithDiagnosis = async (record, files) => {\n  try {\n    let imageUrls = [];\n    if (files && files.length > 0) {\n      imageUrls = await uploadImages(files);\n    }\n    const recordWithImages = {\n      ...record,\n      diagnosisRecords: record.diagnosisRecords.map((diagnosis, index) => ({\n        ...diagnosis,\n        images: diagnosis.images || [],\n        ...(index === record.diagnosisRecords.length - 1 ? {\n          images: imageUrls\n        } : {})\n      }))\n    };\n    return await createRecord(recordWithImages);\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};\n\n// 添加诊断记录\nexport const addDiagnosisToRecord = async (recordId, diagnosisContent, files) => {\n  try {\n    const record = await fetchRecordById(recordId);\n    let imageUrls = [];\n    if (files && files.length > 0) {\n      imageUrls = await uploadImages(files);\n    }\n    const updatedRecord = {\n      ...record,\n      diagnosisRecords: [...record.diagnosisRecords, {\n        content: diagnosisContent,\n        diagnosisTime: new Date().toISOString(),\n        images: imageUrls\n      }]\n    };\n    return await updateRecord(recordId, updatedRecord);\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","headers","interceptors","response","use","undefined","error","config","retry","Promise","reject","retryCount","backoff","resolve","setTimeout","Math","pow","handleError","errorData","data","Error","request","fetchRecords","get","fetchRecordById","id","createRecord","record","post","updateRecord","put","uploadImages","files","formData","FormData","forEach","file","append","urls","createRecordWithDiagnosis","imageUrls","length","recordWithImages","diagnosisRecords","map","diagnosis","index","images","addDiagnosisToRecord","recordId","diagnosisContent","updatedRecord","content","diagnosisTime","Date","toISOString"],"sources":["F:/Users/迷失小爷/文档/Aicoder/vscode/bingli/medical-record-assistant/src/services/api.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\nimport { Record } from '../types';\n\n// 定义API基础URL\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// 创建axios实例\nconst api = axios.create({\n    baseURL: API_BASE_URL,\n    timeout: 10000, // 10秒超时\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n// 添加请求重试拦截器\napi.interceptors.response.use(undefined, async (error: AxiosError) => {\n    const config = error.config;\n    if (!config || !config.retry) {\n        return Promise.reject(error);\n    }\n    config.retryCount = config.retryCount || 0;\n    \n    if (config.retryCount >= 3) {\n        return Promise.reject(error);\n    }\n    \n    config.retryCount += 1;\n    const backoff = new Promise(resolve => {\n        setTimeout(() => resolve(null), 1000 * Math.pow(2, config.retryCount - 1));\n    });\n    await backoff;\n    return api(config);\n});\n\n// 定义错误响应的接口\ninterface ErrorResponse {\n    error: string;\n}\n\n// 错误处理函数\nconst handleError = (error: AxiosError) => {\n    if (error.response) {\n        const errorData = error.response.data as ErrorResponse;\n        throw new Error(errorData.error || '请求失败');\n    } else if (error.request) {\n        throw new Error('无法连接到服务器');\n    } else {\n        throw new Error('请求配置错误');\n    }\n};\n\n// 获取所有记录\nexport const fetchRecords = async (): Promise<Record[]> => {\n    try {\n        const response = await api.get('/records');\n        return response.data;\n    } catch (error) {\n        handleError(error as AxiosError);\n        return [];\n    }\n};\n\n// 获取单个记录\nexport const fetchRecordById = async (id: string): Promise<Record> => {\n    try {\n        const response = await api.get(`/records/${id}`);\n        return response.data;\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};\n\n// 创建新记录\nexport const createRecord = async (record: Omit<Record, 'id' | 'createTime' | 'lastDiagnosisTime'>): Promise<Record> => {\n    try {\n        const response = await api.post('/records', record);\n        return response.data;\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};\n\n// 更新记录\nexport const updateRecord = async (id: string, record: Partial<Record>): Promise<Record> => {\n    try {\n        const response = await api.put(`/records/${id}`, record);\n        return response.data;\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};\n\n// 上传图片\nexport const uploadImages = async (files: File[]): Promise<string[]> => {\n    try {\n        const formData = new FormData();\n        files.forEach(file => {\n            formData.append('images', file);\n        });\n\n        const response = await api.post('/upload', formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        });\n\n        return response.data.urls;\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};\n\n// 创建带有诊断记录的新病例\nexport const createRecordWithDiagnosis = async (\n    record: Omit<Record, 'id' | 'createTime' | 'lastDiagnosisTime'>,\n    files?: File[]\n): Promise<Record> => {\n    try {\n        let imageUrls: string[] = [];\n        if (files && files.length > 0) {\n            imageUrls = await uploadImages(files);\n        }\n\n        const recordWithImages = {\n            ...record,\n            diagnosisRecords: record.diagnosisRecords.map((diagnosis, index) => ({\n                ...diagnosis,\n                images: diagnosis.images || [],\n                ...(index === record.diagnosisRecords.length - 1 ? { images: imageUrls } : {})\n            }))\n        };\n\n        return await createRecord(recordWithImages);\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};\n\n// 添加诊断记录\nexport const addDiagnosisToRecord = async (\n    recordId: string,\n    diagnosisContent: string,\n    files?: File[]\n): Promise<Record> => {\n    try {\n        const record = await fetchRecordById(recordId);\n        let imageUrls: string[] = [];\n        \n        if (files && files.length > 0) {\n            imageUrls = await uploadImages(files);\n        }\n\n        const updatedRecord = {\n            ...record,\n            diagnosisRecords: [\n                ...record.diagnosisRecords,\n                {\n                    content: diagnosisContent,\n                    diagnosisTime: new Date().toISOString(),\n                    images: imageUrls\n                }\n            ]\n        };\n\n        return await updateRecord(recordId, updatedRecord);\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}