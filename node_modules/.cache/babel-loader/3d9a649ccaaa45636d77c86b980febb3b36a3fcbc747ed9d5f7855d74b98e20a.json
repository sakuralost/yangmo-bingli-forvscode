{"ast":null,"code":"var _jsxFileName = \"F:\\\\Users\\\\\\u8FF7\\u5931\\u5C0F\\u7237\\\\\\u6587\\u6863\\\\Aicoder\\\\vscode\\\\bingli\\\\medical-record-assistant\\\\src\\\\pages\\\\RecordPage.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useParams } from 'react-router-dom'; // 用于获取路由参数\nimport RecordDetails from '../components/RecordDetails'; // 导入显示病例详情的组件\nimport { fetchRecordById } from '../services/api'; // 导入根据ID获取病例数据的API方法\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// 定义一个函数式组件 RecordPage\nconst RecordPage = () => {\n  _s();\n  // 从路由参数中获取病例的ID\n  const {\n    id\n  } = useParams();\n\n  // 修改 record 的状态类型为 Record | null\n  const [record, setRecord] = React.useState(null);\n\n  // 定义状态变量 loading，用于指示数据是否正在加载，初始值为 true\n  const [loading, setLoading] = React.useState(true);\n\n  // 定义状态变量 error，用于存储错误信息，初始值为 null\n  const [error, setError] = React.useState(null);\n\n  // 使用 React 的 useEffect 钩子在组件加载时执行副作用操作\n  React.useEffect(() => {\n    // 定义一个异步函数，用于获取病例数据\n    const getRecord = async () => {\n      if (!id) {\n        setError('Invalid record ID');\n        setLoading(false);\n        return;\n      }\n      try {\n        // 调用 API 方法，根据 ID 获取病例数据\n        const data = await fetchRecordById(id);\n        // 将获取到的数据存储到 record 状态中\n        setRecord(data);\n      } catch (err) {\n        // 如果发生错误，将错误信息存储到 error 状态中\n        setError('Failed to fetch record');\n      } finally {\n        // 无论成功还是失败，都将 loading 状态设置为 false\n        setLoading(false);\n      }\n    };\n\n    // 调用异步函数获取病例数据\n    getRecord();\n  }, [id]); // 依赖项为 id，当 id 变化时重新执行\n\n  // 如果数据正在加载，显示加载提示\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 16\n    }, this);\n  }\n\n  // 如果发生错误，显示错误信息\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 16\n    }, this);\n  }\n\n  // 如果成功获取到病例数据，显示病例详情；否则显示“未找到病例”提示\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: record ? /*#__PURE__*/_jsxDEV(RecordDetails, {\n      record: record,\n      onUpdate: updatedRecord => setRecord(updatedRecord)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No record found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n// 导出 RecordPage 组件，供其他模块使用\n_s(RecordPage, \"hqNq2ASAJ5MaMTa+dQjbFh1J+IE=\", false, function () {\n  return [useParams];\n});\n_c = RecordPage;\nexport default RecordPage;\nvar _c;\n$RefreshReg$(_c, \"RecordPage\");","map":{"version":3,"names":["React","useParams","RecordDetails","fetchRecordById","jsxDEV","_jsxDEV","RecordPage","_s","id","record","setRecord","useState","loading","setLoading","error","setError","useEffect","getRecord","data","err","children","fileName","_jsxFileName","lineNumber","columnNumber","onUpdate","updatedRecord","_c","$RefreshReg$"],"sources":["F:/Users/迷失小爷/文档/Aicoder/vscode/bingli/medical-record-assistant/src/pages/RecordPage.tsx"],"sourcesContent":["import React from 'react';\nimport { useParams } from 'react-router-dom'; // 用于获取路由参数\nimport RecordDetails from '../components/RecordDetails'; // 导入显示病例详情的组件\nimport { fetchRecordById } from '../services/api'; // 导入根据ID获取病例数据的API方法\nimport { Record } from '../types';\n\n// 定义一个函数式组件 RecordPage\nconst RecordPage: React.FC = () => {\n    // 从路由参数中获取病例的ID\n    const { id } = useParams<{ id: string }>();\n\n    // 修改 record 的状态类型为 Record | null\n    const [record, setRecord] = React.useState<Record | null>(null);\n\n    // 定义状态变量 loading，用于指示数据是否正在加载，初始值为 true\n    const [loading, setLoading] = React.useState(true);\n\n    // 定义状态变量 error，用于存储错误信息，初始值为 null\n    const [error, setError] = React.useState<string | null>(null);\n\n    // 使用 React 的 useEffect 钩子在组件加载时执行副作用操作\n    React.useEffect(() => {\n        // 定义一个异步函数，用于获取病例数据\n        const getRecord = async () => {\n            if (!id) {\n                setError('Invalid record ID');\n                setLoading(false);\n                return;\n            }\n            try {\n                // 调用 API 方法，根据 ID 获取病例数据\n                const data = await fetchRecordById(id);\n                // 将获取到的数据存储到 record 状态中\n                setRecord(data);\n            } catch (err) {\n                // 如果发生错误，将错误信息存储到 error 状态中\n                setError('Failed to fetch record');\n            } finally {\n                // 无论成功还是失败，都将 loading 状态设置为 false\n                setLoading(false);\n            }\n        };\n\n        // 调用异步函数获取病例数据\n        getRecord();\n    }, [id]); // 依赖项为 id，当 id 变化时重新执行\n\n    // 如果数据正在加载，显示加载提示\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    // 如果发生错误，显示错误信息\n    if (error) {\n        return <div>{error}</div>;\n    }\n\n    // 如果成功获取到病例数据，显示病例详情；否则显示“未找到病例”提示\n    return (\n        <div>\n            {record ? (\n                <RecordDetails \n                    record={record} \n                    onUpdate={(updatedRecord) => setRecord(updatedRecord)} \n                />\n            ) : (\n                <div>No record found</div>\n            )}\n        </div>\n    );\n};\n\n// 导出 RecordPage 组件，供其他模块使用\nexport default RecordPage;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB,CAAC,CAAC;AAC9C,OAAOC,aAAa,MAAM,6BAA6B,CAAC,CAAC;AACzD,SAASC,eAAe,QAAQ,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGnD;AACA,MAAMC,UAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B;EACA,MAAM;IAAEC;EAAG,CAAC,GAAGP,SAAS,CAAiB,CAAC;;EAE1C;EACA,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGV,KAAK,CAACW,QAAQ,CAAgB,IAAI,CAAC;;EAE/D;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,KAAK,CAACW,QAAQ,CAAC,IAAI,CAAC;;EAElD;EACA,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGf,KAAK,CAACW,QAAQ,CAAgB,IAAI,CAAC;;EAE7D;EACAX,KAAK,CAACgB,SAAS,CAAC,MAAM;IAClB;IACA,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI,CAACT,EAAE,EAAE;QACLO,QAAQ,CAAC,mBAAmB,CAAC;QAC7BF,UAAU,CAAC,KAAK,CAAC;QACjB;MACJ;MACA,IAAI;QACA;QACA,MAAMK,IAAI,GAAG,MAAMf,eAAe,CAACK,EAAE,CAAC;QACtC;QACAE,SAAS,CAACQ,IAAI,CAAC;MACnB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV;QACAJ,QAAQ,CAAC,wBAAwB,CAAC;MACtC,CAAC,SAAS;QACN;QACAF,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;;IAED;IACAI,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACT,EAAE,CAAC,CAAC,CAAC,CAAC;;EAEV;EACA,IAAII,OAAO,EAAE;IACT,oBAAOP,OAAA;MAAAe,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC;;EAEA;EACA,IAAIV,KAAK,EAAE;IACP,oBAAOT,OAAA;MAAAe,QAAA,EAAMN;IAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC7B;;EAEA;EACA,oBACInB,OAAA;IAAAe,QAAA,EACKX,MAAM,gBACHJ,OAAA,CAACH,aAAa;MACVO,MAAM,EAAEA,MAAO;MACfgB,QAAQ,EAAGC,aAAa,IAAKhB,SAAS,CAACgB,aAAa;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzD,CAAC,gBAEFnB,OAAA;MAAAe,QAAA,EAAK;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAC5B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;;AAED;AAAAjB,EAAA,CAjEMD,UAAoB;EAAA,QAEPL,SAAS;AAAA;AAAA0B,EAAA,GAFtBrB,UAAoB;AAkE1B,eAAeA,UAAU;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}