{"ast":null,"code":"import axios from 'axios';\n\n// 定义 API 的基础 URL，通常是后端服务的地址\nconst API_BASE_URL = 'http://localhost:5000/api'; // 替换为实际的 API 基础 URL\n\n// 获取所有记录的函数\nexport const fetchRecords = async () => {\n  try {\n    // 发送 GET 请求到 /records 端点以获取记录数据\n    const response = await axios.get(`${API_BASE_URL}/records`);\n    // 返回从服务器获取的数据\n    return response.data;\n  } catch (error) {\n    // 如果请求失败，抛出错误并附带错误信息\n    throw new Error('获取记录时出错: ' + error.message);\n  }\n};\n\n// 根据 ID 获取记录的函数\nexport const fetchRecordById = async id => {\n  try {\n    // 发送 GET 请求到 /records/{id} 端点以获取指定 ID 的记录\n    const response = await axios.get(`${API_BASE_URL}/records/${id}`);\n    // 返回从服务器获取的数据\n    return response.data;\n  } catch (error) {\n    // 如果请求失败，抛出错误并附带错误信息\n    throw new Error('获取记录时出错: ' + error.message);\n  }\n};\n\n// 保存新记录的函数\nexport const saveRecord = async record => {\n  try {\n    // 发送 POST 请求到 /records 端点以保存新记录\n    // record 参数是要保存的记录数据\n    const response = await axios.post(`${API_BASE_URL}/records`, record);\n    // 返回从服务器获取的响应数据\n    return response.data;\n  } catch (error) {\n    // 如果请求失败，抛出错误并附带错误信息\n    throw new Error('保存记录时出错: ' + error.message);\n  }\n};\n\n// 更新现有记录的函数\nexport const updateRecord = async (id, updatedRecord) => {\n  try {\n    // 发送 PUT 请求到 /records/{id} 端点以更新指定 ID 的记录\n    // id 参数是记录的唯一标识符，updatedRecord 是更新后的记录数据\n    const response = await axios.put(`${API_BASE_URL}/records/${id}`, updatedRecord);\n    // 返回从服务器获取的响应数据\n    return response.data;\n  } catch (error) {\n    // 如果请求失败，抛出错误并附带错误信息\n    throw new Error('更新记录时出错: ' + error.message);\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","fetchRecords","response","get","data","error","Error","message","fetchRecordById","id","saveRecord","record","post","updateRecord","updatedRecord","put"],"sources":["F:/Users/迷失小爷/文档/Aicoder/vscode/bingli/medical-record-assistant/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\n// 定义 API 的基础 URL，通常是后端服务的地址\nconst API_BASE_URL = 'http://localhost:5000/api'; // 替换为实际的 API 基础 URL\n\n// 获取所有记录的函数\nexport const fetchRecords = async () => {\n    try {\n        // 发送 GET 请求到 /records 端点以获取记录数据\n        const response = await axios.get(`${API_BASE_URL}/records`);\n        // 返回从服务器获取的数据\n        return response.data;\n    } catch (error) {\n        // 如果请求失败，抛出错误并附带错误信息\n        throw new Error('获取记录时出错: ' + error.message);\n    }\n};\n\n// 根据 ID 获取记录的函数\nexport const fetchRecordById = async (id: string) => {\n    try {\n        // 发送 GET 请求到 /records/{id} 端点以获取指定 ID 的记录\n        const response = await axios.get(`${API_BASE_URL}/records/${id}`);\n        // 返回从服务器获取的数据\n        return response.data;\n    } catch (error) {\n        // 如果请求失败，抛出错误并附带错误信息\n        throw new Error('获取记录时出错: ' + error.message);\n    }\n};\n\n// 保存新记录的函数\nexport const saveRecord = async (record) => {\n    try {\n        // 发送 POST 请求到 /records 端点以保存新记录\n        // record 参数是要保存的记录数据\n        const response = await axios.post(`${API_BASE_URL}/records`, record);\n        // 返回从服务器获取的响应数据\n        return response.data;\n    } catch (error) {\n        // 如果请求失败，抛出错误并附带错误信息\n        throw new Error('保存记录时出错: ' + error.message);\n    }\n};\n\n// 更新现有记录的函数\nexport const updateRecord = async (id, updatedRecord) => {\n    try {\n        // 发送 PUT 请求到 /records/{id} 端点以更新指定 ID 的记录\n        // id 参数是记录的唯一标识符，updatedRecord 是更新后的记录数据\n        const response = await axios.put(`${API_BASE_URL}/records/${id}`, updatedRecord);\n        // 返回从服务器获取的响应数据\n        return response.data;\n    } catch (error) {\n        // 如果请求失败，抛出错误并附带错误信息\n        throw new Error('更新记录时出错: ' + error.message);\n    }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG,2BAA2B,CAAC,CAAC;;AAElD;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,UAAU,CAAC;IAC3D;IACA,OAAOE,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ;IACA,MAAM,IAAIC,KAAK,CAAC,WAAW,GAAGD,KAAK,CAACE,OAAO,CAAC;EAChD;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOC,EAAU,IAAK;EACjD,IAAI;IACA;IACA,MAAMP,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,YAAYS,EAAE,EAAE,CAAC;IACjE;IACA,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ;IACA,MAAM,IAAIC,KAAK,CAAC,WAAW,GAAGD,KAAK,CAACE,OAAO,CAAC;EAChD;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,UAAU,GAAG,MAAOC,MAAM,IAAK;EACxC,IAAI;IACA;IACA;IACA,MAAMT,QAAQ,GAAG,MAAMH,KAAK,CAACa,IAAI,CAAC,GAAGZ,YAAY,UAAU,EAAEW,MAAM,CAAC;IACpE;IACA,OAAOT,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ;IACA,MAAM,IAAIC,KAAK,CAAC,WAAW,GAAGD,KAAK,CAACE,OAAO,CAAC;EAChD;AACJ,CAAC;;AAED;AACA,OAAO,MAAMM,YAAY,GAAG,MAAAA,CAAOJ,EAAE,EAAEK,aAAa,KAAK;EACrD,IAAI;IACA;IACA;IACA,MAAMZ,QAAQ,GAAG,MAAMH,KAAK,CAACgB,GAAG,CAAC,GAAGf,YAAY,YAAYS,EAAE,EAAE,EAAEK,aAAa,CAAC;IAChF;IACA,OAAOZ,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ;IACA,MAAM,IAAIC,KAAK,CAAC,WAAW,GAAGD,KAAK,CAACE,OAAO,CAAC;EAChD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}