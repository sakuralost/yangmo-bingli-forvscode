{"ast":null,"code":"var _jsxFileName = \"F:\\\\Users\\\\\\u8FF7\\u5931\\u5C0F\\u7237\\\\\\u6587\\u6863\\\\Aicoder\\\\vscode\\\\bingli\\\\medical-record-assistant\\\\src\\\\pages\\\\RecordPage.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useParams, useNavigate } from 'react-router-dom'; // 用于获取路由参数和导航\nimport RecordDetails from '../components/RecordDetails'; // 导入显示病例详情的组件\nimport { fetchRecordById } from '../services/api'; // 导入根据ID获取病例数据的API方法\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// 定义一个函数式组件 RecordPage\nconst RecordPage = () => {\n  _s();\n  // 从路由参数中获取病例的ID\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n\n  // 修改 record 的状态类型为 Record | null\n  const [record, setRecord] = React.useState(null);\n\n  // 定义状态变量 loading，用于指示数据是否正在加载，初始值为 true\n  const [loading, setLoading] = React.useState(true);\n\n  // 定义状态变量 error，用于存储错误信息，初始值为 null\n  const [error, setError] = React.useState(null);\n\n  // 使用 React 的 useEffect 钩子在组件加载时执行副作用操作\n  React.useEffect(() => {\n    // 定义一个异步函数，用于获取病例数据\n    const getRecord = async () => {\n      if (!id) {\n        setError('Invalid record ID');\n        setLoading(false);\n        return;\n      }\n      try {\n        // 调用 API 方法，根据 ID 获取病例数据\n        const data = await fetchRecordById(id);\n        // 将获取到的数据存储到 record 状态中\n        setRecord(data);\n      } catch (err) {\n        // 如果发生错误，将错误信息存储到 error 状态中\n        setError('Failed to fetch record');\n      } finally {\n        // 无论成功还是失败，都将 loading 状态设置为 false\n        setLoading(false);\n      }\n    };\n\n    // 调用异步函数获取病例数据\n    getRecord();\n  }, [id]); // 依赖项为 id，当 id 变化时重新执行\n\n  // 如果数据正在加载，显示加载提示\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 16\n    }, this);\n  }\n\n  // 如果发生错误，显示错误信息\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 16\n    }, this);\n  }\n\n  // 如果成功获取到病例数据，显示病例详情；否则显示“未找到病例”提示\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/'),\n        style: {\n          padding: '8px 16px',\n          marginBottom: '20px',\n          backgroundColor: '#f5f5f5',\n          border: '1px solid #ddd',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"\\u8FD4\\u56DE\\u4E3B\\u9875\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 23\n    }, this), record && /*#__PURE__*/_jsxDEV(RecordDetails, {\n      record: record,\n      onUpdate: updatedRecord => setRecord(updatedRecord)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this), !loading && !record && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u672A\\u627E\\u5230\\u75C5\\u4F8B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n// 导出 RecordPage 组件，供其他模块使用\n_s(RecordPage, \"3J4BF/VVNmms39cQv6kZNg8zMkU=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = RecordPage;\nexport default RecordPage;\nvar _c;\n$RefreshReg$(_c, \"RecordPage\");","map":{"version":3,"names":["React","useParams","useNavigate","RecordDetails","fetchRecordById","jsxDEV","_jsxDEV","RecordPage","_s","id","navigate","record","setRecord","useState","loading","setLoading","error","setError","useEffect","getRecord","data","err","children","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","onClick","marginBottom","backgroundColor","border","borderRadius","cursor","onUpdate","updatedRecord","_c","$RefreshReg$"],"sources":["F:/Users/迷失小爷/文档/Aicoder/vscode/bingli/medical-record-assistant/src/pages/RecordPage.tsx"],"sourcesContent":["import React from 'react';\nimport { useParams, useNavigate } from 'react-router-dom'; // 用于获取路由参数和导航\nimport RecordDetails from '../components/RecordDetails'; // 导入显示病例详情的组件\nimport { fetchRecordById } from '../services/api'; // 导入根据ID获取病例数据的API方法\nimport { Record } from '../types';\n\n// 定义一个函数式组件 RecordPage\nconst RecordPage: React.FC = () => {\n    // 从路由参数中获取病例的ID\n    const { id } = useParams<{ id: string }>();\n    const navigate = useNavigate();\n\n    // 修改 record 的状态类型为 Record | null\n    const [record, setRecord] = React.useState<Record | null>(null);\n\n    // 定义状态变量 loading，用于指示数据是否正在加载，初始值为 true\n    const [loading, setLoading] = React.useState(true);\n\n    // 定义状态变量 error，用于存储错误信息，初始值为 null\n    const [error, setError] = React.useState<string | null>(null);\n\n    // 使用 React 的 useEffect 钩子在组件加载时执行副作用操作\n    React.useEffect(() => {\n        // 定义一个异步函数，用于获取病例数据\n        const getRecord = async () => {\n            if (!id) {\n                setError('Invalid record ID');\n                setLoading(false);\n                return;\n            }\n            try {\n                // 调用 API 方法，根据 ID 获取病例数据\n                const data = await fetchRecordById(id);\n                // 将获取到的数据存储到 record 状态中\n                setRecord(data);\n            } catch (err) {\n                // 如果发生错误，将错误信息存储到 error 状态中\n                setError('Failed to fetch record');\n            } finally {\n                // 无论成功还是失败，都将 loading 状态设置为 false\n                setLoading(false);\n            }\n        };\n\n        // 调用异步函数获取病例数据\n        getRecord();\n    }, [id]); // 依赖项为 id，当 id 变化时重新执行\n\n    // 如果数据正在加载，显示加载提示\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    // 如果发生错误，显示错误信息\n    if (error) {\n        return <div>{error}</div>;\n    }\n\n    // 如果成功获取到病例数据，显示病例详情；否则显示“未找到病例”提示\n    return (\n        <div>\n            <div style={{ padding: '20px' }}>\n                <button \n                    onClick={() => navigate('/')}\n                    style={{\n                        padding: '8px 16px',\n                        marginBottom: '20px',\n                        backgroundColor: '#f5f5f5',\n                        border: '1px solid #ddd',\n                        borderRadius: '4px',\n                        cursor: 'pointer'\n                    }}\n                >\n                    返回主页\n                </button>\n            </div>\n            {loading && <div>Loading...</div>}\n            {error && <div>{error}</div>}\n            {record && (\n                <RecordDetails \n                    record={record} \n                    onUpdate={(updatedRecord) => setRecord(updatedRecord)} \n                />\n            )}\n            {!loading && !record && !error && (\n                <div>未找到病例</div>\n            )}\n        </div>\n    );\n};\n\n// 导出 RecordPage 组件，供其他模块使用\nexport default RecordPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}