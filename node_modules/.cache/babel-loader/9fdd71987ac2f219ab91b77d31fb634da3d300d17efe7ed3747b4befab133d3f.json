{"ast":null,"code":"import axios, { InternalAxiosRequestConfig } from 'axios';\n\n// 扩展AxiosRequestConfig类型\n\n// 定义API基础URL\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  // 10秒超时\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 添加请求重试拦截器\napi.interceptors.response.use(undefined, async error => {\n  var _config$retryCount;\n  const config = error.config;\n  if (!config || !config.retry) {\n    return Promise.reject(error);\n  }\n\n  // 使用非空断言\n  config.retryCount = (_config$retryCount = config.retryCount) !== null && _config$retryCount !== void 0 ? _config$retryCount : 0;\n  if (config.retryCount >= 3) {\n    return Promise.reject(error);\n  }\n  config.retryCount += 1;\n  const backoff = new Promise(resolve => {\n    // 使用非空断言，因为我们已经确保retryCount有值\n    setTimeout(() => resolve(null), 1000 * Math.pow(2, config.retryCount - 1));\n  });\n  await backoff;\n  return api(config);\n});\n\n// 定义错误响应的接口\n\n// 错误处理函数\nconst handleError = error => {\n  if (error.response) {\n    const errorData = error.response.data;\n    throw new Error(errorData.error || '请求失败');\n  } else if (error.request) {\n    throw new Error('无法连接到服务器');\n  } else {\n    throw new Error('请求配置错误');\n  }\n};\n\n// 重试函数\nconst retryRequest = async (fn, retries = 3, delay = 1000) => {\n  try {\n    return await fn();\n  } catch (error) {\n    if (retries > 0) {\n      await new Promise(resolve => setTimeout(resolve, delay));\n      return retryRequest(fn, retries - 1, delay * 2);\n    }\n    throw error;\n  }\n};\n\n// 获取所有记录\nexport const fetchRecords = async () => {\n  return retryRequest(async () => {\n    try {\n      const response = await api.get('/records');\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        if (!error.response) {\n          throw new Error('无法连接到服务器，请检查服务器是否启动');\n        }\n        const errorData = error.response.data;\n        throw new Error(errorData.error || '请求失败');\n      }\n      throw error;\n    }\n  });\n};\n\n// 获取单个记录\nexport const fetchRecordById = async id => {\n  return retryRequest(async () => {\n    try {\n      const response = await api.get(`/records/${id}`);\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        if (!error.response) {\n          throw new Error('无法连接到服务器，请检查服务器是否启动');\n        }\n        const errorData = error.response.data;\n        throw new Error(errorData.error || '请求失败');\n      }\n      throw error;\n    }\n  });\n};\n\n// 创建新记录\nexport const createRecord = async record => {\n  try {\n    const response = await api.post('/records', record);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};\n\n// 更新记录\nexport const updateRecord = async (id, record) => {\n  try {\n    const response = await api.put(`/records/${id}`, record);\n    return response.data;\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};\n\n// 上传图片\nexport const uploadImages = async files => {\n  try {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('images', file);\n    });\n    const response = await api.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.urls;\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};\n\n// 创建带有诊断记录的新病例\nexport const createRecordWithDiagnosis = async (record, files) => {\n  try {\n    let imageUrls = [];\n    if (files && files.length > 0) {\n      imageUrls = await uploadImages(files);\n    }\n    const recordWithImages = {\n      ...record,\n      diagnosisRecords: record.diagnosisRecords.map((diagnosis, index) => ({\n        ...diagnosis,\n        images: diagnosis.images || [],\n        ...(index === record.diagnosisRecords.length - 1 ? {\n          images: imageUrls\n        } : {})\n      }))\n    };\n    return await createRecord(recordWithImages);\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};\n\n// 添加诊断记录\nexport const addDiagnosisToRecord = async (recordId, diagnosisContent, files) => {\n  try {\n    const record = await fetchRecordById(recordId);\n    let imageUrls = [];\n    if (files && files.length > 0) {\n      imageUrls = await uploadImages(files);\n    }\n    const updatedRecord = {\n      ...record,\n      diagnosisRecords: [...record.diagnosisRecords, {\n        content: diagnosisContent,\n        diagnosisTime: new Date().toISOString(),\n        images: imageUrls\n      }]\n    };\n    return await updateRecord(recordId, updatedRecord);\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","InternalAxiosRequestConfig","API_BASE_URL","api","create","baseURL","timeout","headers","interceptors","response","use","undefined","error","_config$retryCount","config","retry","Promise","reject","retryCount","backoff","resolve","setTimeout","Math","pow","handleError","errorData","data","Error","request","retryRequest","fn","retries","delay","fetchRecords","get","isAxiosError","fetchRecordById","id","createRecord","record","post","updateRecord","put","uploadImages","files","formData","FormData","forEach","file","append","urls","createRecordWithDiagnosis","imageUrls","length","recordWithImages","diagnosisRecords","map","diagnosis","index","images","addDiagnosisToRecord","recordId","diagnosisContent","updatedRecord","content","diagnosisTime","Date","toISOString"],"sources":["F:/Users/迷失小爷/文档/Aicoder/vscode/bingli/medical-record-assistant/src/services/api.ts"],"sourcesContent":["import axios, { AxiosError, InternalAxiosRequestConfig } from 'axios';\nimport { Record } from '../types';\n\n// 扩展AxiosRequestConfig类型\ndeclare module 'axios' {\n    export interface InternalAxiosRequestConfig {\n        retry?: boolean;\n        retryCount?: number;\n    }\n}\n\n// 定义API基础URL\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// 创建axios实例\nconst api = axios.create({\n    baseURL: API_BASE_URL,\n    timeout: 10000, // 10秒超时\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n// 添加请求重试拦截器\napi.interceptors.response.use(undefined, async (error: AxiosError) => {\n    const config = error.config;\n    if (!config || !config.retry) {\n        return Promise.reject(error);\n    }\n\n    // 使用非空断言\n    config.retryCount = (config.retryCount ?? 0);\n\n    if (config.retryCount >= 3) {\n        return Promise.reject(error);\n    }\n    \n    config.retryCount += 1;\n    const backoff = new Promise(resolve => {\n        // 使用非空断言，因为我们已经确保retryCount有值\n        setTimeout(() => resolve(null), 1000 * Math.pow(2, config.retryCount! - 1));\n    });\n    await backoff;\n    return api(config);\n});\n\n// 定义错误响应的接口\ninterface ErrorResponse {\n    error: string;\n}\n\n// 错误处理函数\nconst handleError = (error: AxiosError) => {\n    if (error.response) {\n        const errorData = error.response.data as ErrorResponse;\n        throw new Error(errorData.error || '请求失败');\n    } else if (error.request) {\n        throw new Error('无法连接到服务器');\n    } else {\n        throw new Error('请求配置错误');\n    }\n};\n\n// 重试函数\nconst retryRequest = async (fn: () => Promise<any>, retries = 3, delay = 1000): Promise<any> => {\n    try {\n        return await fn();\n    } catch (error) {\n        if (retries > 0) {\n            await new Promise(resolve => setTimeout(resolve, delay));\n            return retryRequest(fn, retries - 1, delay * 2);\n        }\n        throw error;\n    }\n};\n\n// 获取所有记录\nexport const fetchRecords = async (): Promise<Record[]> => {\n    return retryRequest(async () => {\n        try {\n            const response = await api.get('/records');\n            return response.data;\n        } catch (error) {\n            if (axios.isAxiosError(error)) {\n                if (!error.response) {\n                    throw new Error('无法连接到服务器，请检查服务器是否启动');\n                }\n                const errorData = error.response.data as ErrorResponse;\n                throw new Error(errorData.error || '请求失败');\n            }\n            throw error;\n        }\n    });\n};\n\n// 获取单个记录\nexport const fetchRecordById = async (id: string): Promise<Record> => {\n    return retryRequest(async () => {\n        try {\n            const response = await api.get(`/records/${id}`);\n            return response.data;\n        } catch (error) {\n            if (axios.isAxiosError(error)) {\n                if (!error.response) {\n                    throw new Error('无法连接到服务器，请检查服务器是否启动');\n                }\n                const errorData = error.response.data as ErrorResponse;\n                throw new Error(errorData.error || '请求失败');\n            }\n            throw error;\n        }\n    });\n};\n\n// 创建新记录\nexport const createRecord = async (record: Omit<Record, 'id' | 'createTime' | 'lastDiagnosisTime'>): Promise<Record> => {\n    try {\n        const response = await api.post('/records', record);\n        return response.data;\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};\n\n// 更新记录\nexport const updateRecord = async (id: string, record: Partial<Record>): Promise<Record> => {\n    try {\n        const response = await api.put(`/records/${id}`, record);\n        return response.data;\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};\n\n// 上传图片\nexport const uploadImages = async (files: File[]): Promise<string[]> => {\n    try {\n        const formData = new FormData();\n        files.forEach(file => {\n            formData.append('images', file);\n        });\n\n        const response = await api.post('/upload', formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        });\n\n        return response.data.urls;\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};\n\n// 创建带有诊断记录的新病例\nexport const createRecordWithDiagnosis = async (\n    record: Omit<Record, 'id' | 'createTime' | 'lastDiagnosisTime'>,\n    files?: File[]\n): Promise<Record> => {\n    try {\n        let imageUrls: string[] = [];\n        if (files && files.length > 0) {\n            imageUrls = await uploadImages(files);\n        }\n\n        const recordWithImages = {\n            ...record,\n            diagnosisRecords: record.diagnosisRecords.map((diagnosis, index) => ({\n                ...diagnosis,\n                images: diagnosis.images || [],\n                ...(index === record.diagnosisRecords.length - 1 ? { images: imageUrls } : {})\n            }))\n        };\n\n        return await createRecord(recordWithImages);\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};\n\n// 添加诊断记录\nexport const addDiagnosisToRecord = async (\n    recordId: string,\n    diagnosisContent: string,\n    files?: File[]\n): Promise<Record> => {\n    try {\n        const record = await fetchRecordById(recordId);\n        let imageUrls: string[] = [];\n        \n        if (files && files.length > 0) {\n            imageUrls = await uploadImages(files);\n        }\n\n        const updatedRecord = {\n            ...record,\n            diagnosisRecords: [\n                ...record.diagnosisRecords,\n                {\n                    content: diagnosisContent,\n                    diagnosisTime: new Date().toISOString(),\n                    images: imageUrls\n                }\n            ]\n        };\n\n        return await updateRecord(recordId, updatedRecord);\n    } catch (error) {\n        handleError(error as AxiosError);\n        throw error;\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}